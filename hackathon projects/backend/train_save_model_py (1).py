# -*- coding: utf-8 -*-
"""train_save_model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123A1XvIPs_GY3HWwm5yp1oy7xQPbMKQK
"""

# train_save_model.py
import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Step 1: Load the Dataset
data = pd.read_csv("diabetes.csv")  # Ensure the dataset is in the same directory or provide the correct path

# Step 2: Split the Data into Features (X) and Target (y)
X = data.drop("Outcome", axis=1)  # Features (all columns except 'Outcome')
y = data["Outcome"]  # Target (the 'Outcome' column, indicating diabetes presence)

# Step 3: Split the Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train the Model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 5: Evaluate the Model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Model Accuracy:", accuracy)

# Step 6: Save the Model to a File
with open("diabetes_model.pkl", "wb") as file:
    pickle.dump(model, file)
print("Model saved to diabetes_model.pkl")

import pickle
import pandas as pd

# Load the saved model
with open("diabetes_model.pkl", "rb") as file:
    model = pickle.load(file)

# Example prediction with column names
# Define the column names matching the original training data
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
           'BMI', 'DiabetesPedigreeFunction', 'Age']

# Sample data as a DataFrame with feature names
sample_data = pd.DataFrame([[6, 148, 72, 35, 0, 33.6, 0.627, 50]], columns=columns)

# Make prediction
prediction = model.predict(sample_data)
print("Prediction:", "Diabetes" if prediction[0] == 1 else "No Diabetes")

import gradio as gr
import pickle
import pandas as pd

# Load the trained model
with open("diabetes_model.pkl", "rb") as file:
    model = pickle.load(file)

# Function to make predictions based on user input
def predict_diabetes(Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age):
    # Organize inputs into a DataFrame
    columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
               'BMI', 'DiabetesPedigreeFunction', 'Age']
    input_data = pd.DataFrame([[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin,
                                BMI, DiabetesPedigreeFunction, Age]], columns=columns)

    # Get prediction
    prediction = model.predict(input_data)[0]
    return "Diabetes" if prediction == 1 else "No Diabetes"

# Define Gradio interface
iface = gr.Interface(
    fn=predict_diabetes,
    inputs=[
        gr.Number(label="Pregnancies"),
        gr.Number(label="Glucose"),
        gr.Number(label="BloodPressure"),
        gr.Number(label="SkinThickness"),
        gr.Number(label="Insulin"),
        gr.Number(label="BMI"),
        gr.Number(label="Diabetes Pedigree Function"),
        gr.Number(label="Age")
    ],
    outputs="text",
    title="Diabetes Prediction",
    description="Enter patient details to predict the likelihood of diabetes."
)

# Launch the interface
iface.launch(share=True)
